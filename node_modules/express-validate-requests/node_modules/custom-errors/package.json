{
  "name": "custom-errors",
  "version": "1.5.1",
  "license": "MIT",
  "description": "custom error classes optimised for error logging",
  "tags": [
    "error",
    "errors",
    "custom-errors"
  ],
  "author": {
    "name": "Andrew Griffiths",
    "email": "mail@andrewgriffithsonline.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:techjacker/custom-errors.git"
  },
  "engines": [
    "node >= 0.6.0"
  ],
  "main": "index.js",
  "scripts": {
    "test": "tap ./test"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": ">=0.4",
    "underscore": ">=1.4"
  },
  "readme": "# Custom Error Classes\n\n[![Build Status](https://secure.travis-ci.org/techjacker/custom-errors.png)](http://travis-ci.org/techjacker/custom-errors)\n\n- All classes inherit from the abstract class (lib/abstract-error.js) inspired by [dustin senos's post](http://dustinsenos.com/articles/customErrorsInNode).\n- The abstract error class inherits from the in built error object.\n- All error classes exported in lib/main.js -> index.js\n- Easy logging integration with express.js using the [log errors module](https://github.com/techjacker/log-errors)\n\n### App Error Classes (module.exports.general)\n\t1. ValidationError\n\t2. DatabaseError\n\n### Express Error Classes (module.exports.request)\n\t1. BadRequest = Bad Request Error (400)\n\t2. Unauthorized = Unauthorized Error (401)\n\t3. Forbidden = Forbidden Error (403)\n\t4. NotAcceptable Request Not Acceptable Error (406)\n\n## Sample Usage\n\n### 1. General Error Classes\n```JavaScript\nvar main \t\t\t= require('./../lib/main');\nvar ValidationError = main.general.ValidationError;\n\nvar msg \t = \"terrible input\",\n\tValError = new ValidationError(msg);\n\nconsole.log('ValError', ValError);\n```\n\nSTDOUT output:\n```Shell\nValError {\n\tname: 'Validation',\n\tlogLevel: 'warning',\n\tdoNotKill: undefined,\n\tresCode: undefined,\n\tmessage: 'not a valid date'\n}\n```\n\n### 2. Request Error Classes\n```JavaScript\nvar BadRequestError = main.request.BadRequest;\nvar msg = \"just an awful request\",\n\tReqError = new BadRequestError(msg);\n\nconsole.log('ReqError', ReqError);\n```\n\nSTDOUT output:\n```Shell\nReqError {\n\tname: 'BadRequest',\n\tlogLevel: 'warning',\n\tresCode: 400,\n\tmessage: 'just an awful request'\n}\n```\n\n## Using with Express.js\n\nEasy integration with the [log errors module](https://github.com/techjacker/log-errors)\n\n```JavaScript\nvar BadRequestError = require('customErrors').request.BadRequest;\nvar logErrors   = require('log-errors');\n\n// define some routes\napp.get('/some/route', function(req, res, next) {\n\tif ('error thrown') {\n\t\tnext(new BadRequestError('reason for the bad request being thrown'));\n\t}\n});\n\n//... catchall error middleware (put at very end beneath all routes)\napp.configure('development', function() {\n\n\t// wrap the logger if you need to do something\n\t// with the error before passing it to the logger\n    app.use(function(err, req, res, next) {\n\t\terr.resCode || (err.resCode = 400);\n        logErrors.development(err, req, res, next);\n    });\n});\n\napp.configure('production', function() {\n\t// defaults to sending 500 response if err.resCode is not set\n    app.use(logErrors.production);\n});\n```\n\n### Reference\n#### [Header status codes](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n#### log levels\n##### [Visionmedia Logging Module](https://github.com/visionmedia/log.js)\n\t0 EMERGENCY system is unusable\n\t1 ALERT action must be taken immediately\n\t2 CRITICAL the system is in critical condition\n\t3 ERROR error condition\n\t4 WARNING warning condition\n\t5 NOTICE a normal but significant condition\n\t6 INFO a purely informational message\n\t7 DEBUG messages to debug an application",
  "_id": "custom-errors@1.5.1",
  "dist": {
    "shasum": "bc6626d7171e8f0224ded8e648d9c7cbdaccbe2c",
    "tarball": "http://registry.npmjs.org/custom-errors/-/custom-errors-1.5.1.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "techjacker",
    "email": "mail@andrewgriffithsonline.com"
  },
  "maintainers": [
    {
      "name": "techjacker",
      "email": "mail@andrewgriffithsonline.com"
    }
  ],
  "directories": {},
  "_shasum": "bc6626d7171e8f0224ded8e648d9c7cbdaccbe2c",
  "_resolved": "https://registry.npmjs.org/custom-errors/-/custom-errors-1.5.1.tgz",
  "_from": "custom-errors@>=1.0.0"
}
