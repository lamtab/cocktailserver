{
  "name": "express-validate-requests",
  "license": "MIT",
  "version": "1.1.2",
  "description": "methods to validate and sanatise requests in express.js",
  "tags": [
    "express.js",
    "sanatize",
    "validate",
    "cors",
    "x-origin",
    "cross-origin",
    "express"
  ],
  "author": {
    "name": "Andrew Griffiths",
    "email": "mail@andrewgriffithsonline.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:techjacker/express-validate-requests.git"
  },
  "engines": [
    "node >= 0.6.0"
  ],
  "main": "index.js",
  "scripts": {
    "test": "tap ./test"
  },
  "dependencies": {
    "underscore": ">=1.4",
    "custom-errors": ">=1.0",
    "validator": ">=0.5"
  },
  "devDependencies": {
    "tap": ">=0.4"
  },
  "readme": "# Express Validate Requests\n\n[![Build Status](https://secure.travis-ci.org/techjacker/express-validate-requests.png)](http://travis-ci.org/techjacker/express-validate-requests)\n\n## QuickStart\n#### The following MIDDLEWARE (app.use(fn)) methods are included:\n- sanitizeRequest(req, res, next)\n- allowJustXHR(req, res, next)\n- allowJustJsonRequests(req, res, next)\n- allowXOrigin(req, res, next)\n\nIf the validation fails then an next(error) will be called. You should set up an error catcher as your last piece of middleware as a catchall for any errors.\n\n#### The following helper fns are included:\n- checkGotAllParams(params:{@Object}, requiredParamsKeys:{@Array})\n\n## Full Example\n\n```JavaScript\nvar express    \t= require('express'),\n    app        \t= express(),\n    valExpress \t= require('express-validate-requests'),\n    middle \t\t= valExpress.middleware,\n    helpers\t\t= valExpress.helpers,\n\tallowedHosts = [\"api.domainx.com\", \"www.domainx.com\"],\n\tallowedOrigins = [\"http://domainx.com\", \"http://www.domainx.com\"];\n\napp.configure(function() {\n\tapp.use(middle.allowJustXHR);\n\tapp.use(middle.onlyAllowJsonRequests);\n\tapp.use(middle.sanitizeRequest);\n\n\t// middle.setAllowCrossOrigin returns fn(req, res, next)\n\tapp.use(middle.setAllowCrossOrigin(allowedHosts, allowedOrigins));\n});\n\napp.get('/someroute', function (req,res,next) {\n\tvar requiredParamsKeys = [\"paramOneKey\", \"paramTwoKey\"];\n\tif (!helpers.checkGotAllParams(req.query, requiredParamsKeys)) {\n\t\tnext(new Error('invalid params'));\n\t} else {\n\t\tnext();\n\t}\n});\n\n//... error catcher at very bottom\napp.configure('development', function() {\n    app.use(express.errorHandler()); // built-in express error handler\n});\n\n// listen once configured everything\nhttp.createServer(app).listen(app.get('port'), function() {\n\tconsole.log(\"Express server listening on port: \" + app.get('port'));\n});\n```",
  "_id": "express-validate-requests@1.1.2",
  "dist": {
    "shasum": "32b57cdaaaaa33b46261292c5d9224d04c9f6b45",
    "tarball": "http://registry.npmjs.org/express-validate-requests/-/express-validate-requests-1.1.2.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "techjacker",
    "email": "mail@andrewgriffithsonline.com"
  },
  "maintainers": [
    {
      "name": "techjacker",
      "email": "mail@andrewgriffithsonline.com"
    }
  ],
  "directories": {},
  "_shasum": "32b57cdaaaaa33b46261292c5d9224d04c9f6b45",
  "_resolved": "https://registry.npmjs.org/express-validate-requests/-/express-validate-requests-1.1.2.tgz",
  "_from": "express-validate-requests@*"
}
